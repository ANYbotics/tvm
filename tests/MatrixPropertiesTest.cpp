#include "MatrixProperties.h"

// boost
#define BOOST_TEST_MODULE ConstraintTest
#include <boost/test/unit_test.hpp>

using namespace tvm;

BOOST_AUTO_TEST_CASE(ShapePropertiesTest)
{
  MatrixProperties p0;
  BOOST_CHECK(p0.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p0.positivness() == Positivness::NA);
  BOOST_CHECK(!p0.isConstant());
  BOOST_CHECK(!p0.isDiagonal());
  BOOST_CHECK(!p0.isIdentity());
  BOOST_CHECK(!p0.isInvertible());
  BOOST_CHECK(!p0.isMinusIdentity());
  BOOST_CHECK(!p0.isMultipleOfIdentity());
  BOOST_CHECK(!p0.isNegativeDefinite());
  BOOST_CHECK(!p0.isNegativeSemidefinite());
  BOOST_CHECK(!p0.isNonZeroUndefinite());
  BOOST_CHECK(!p0.isPositiveDefinite());
  BOOST_CHECK(!p0.isPositiveSemiDefinite());
  BOOST_CHECK(!p0.isSymmetric());
  BOOST_CHECK(!p0.isUndefinite());
  BOOST_CHECK(!p0.isZero());

  MatrixProperties p1(MatrixShape::DIAGONAL);
  BOOST_CHECK(p1.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p1.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(!p1.isConstant());
  BOOST_CHECK(p1.isDiagonal());
  BOOST_CHECK(!p1.isIdentity());
  BOOST_CHECK(!p1.isInvertible());
  BOOST_CHECK(!p1.isMinusIdentity());
  BOOST_CHECK(!p1.isMultipleOfIdentity());
  BOOST_CHECK(!p1.isNegativeDefinite());
  BOOST_CHECK(!p1.isNegativeSemidefinite());
  BOOST_CHECK(!p1.isNonZeroUndefinite());
  BOOST_CHECK(!p1.isPositiveDefinite());
  BOOST_CHECK(!p1.isPositiveSemiDefinite());
  BOOST_CHECK(p1.isSymmetric());
  BOOST_CHECK(p1.isUndefinite());
  BOOST_CHECK(!p1.isZero());

  MatrixProperties p2(MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p2.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p2.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(!p2.isConstant());
  BOOST_CHECK(p2.isDiagonal());
  BOOST_CHECK(!p2.isIdentity());
  BOOST_CHECK(!p2.isInvertible());
  BOOST_CHECK(!p2.isMinusIdentity());
  BOOST_CHECK(p2.isMultipleOfIdentity());
  BOOST_CHECK(!p2.isNegativeDefinite());
  BOOST_CHECK(!p2.isNegativeSemidefinite());
  BOOST_CHECK(!p2.isNonZeroUndefinite());
  BOOST_CHECK(!p2.isPositiveDefinite());
  BOOST_CHECK(!p2.isPositiveSemiDefinite());
  BOOST_CHECK(p2.isSymmetric());
  BOOST_CHECK(p2.isUndefinite());
  BOOST_CHECK(!p2.isZero());

  MatrixProperties p3(MatrixShape::IDENTITY);
  BOOST_CHECK(p3.shape() == MatrixShape::IDENTITY);
  BOOST_CHECK(p3.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p3.isConstant());
  BOOST_CHECK(p3.isDiagonal());
  BOOST_CHECK(p3.isIdentity());
  BOOST_CHECK(p3.isInvertible());
  BOOST_CHECK(!p3.isMinusIdentity());
  BOOST_CHECK(p3.isMultipleOfIdentity());
  BOOST_CHECK(!p3.isNegativeDefinite());
  BOOST_CHECK(!p3.isNegativeSemidefinite());
  BOOST_CHECK(p3.isNonZeroUndefinite());
  BOOST_CHECK(p3.isPositiveDefinite());
  BOOST_CHECK(p3.isPositiveSemiDefinite());
  BOOST_CHECK(p3.isSymmetric());
  BOOST_CHECK(p3.isUndefinite());
  BOOST_CHECK(!p3.isZero());

  MatrixProperties p4(MatrixShape::MINUS_IDENTITY);
  BOOST_CHECK(p4.shape() == MatrixShape::MINUS_IDENTITY);
  BOOST_CHECK(p4.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p4.isConstant());
  BOOST_CHECK(p4.isDiagonal());
  BOOST_CHECK(!p4.isIdentity());
  BOOST_CHECK(p4.isInvertible());
  BOOST_CHECK(p4.isMinusIdentity());
  BOOST_CHECK(p4.isMultipleOfIdentity());
  BOOST_CHECK(p4.isNegativeDefinite());
  BOOST_CHECK(p4.isNegativeSemidefinite());
  BOOST_CHECK(p4.isNonZeroUndefinite());
  BOOST_CHECK(!p4.isPositiveDefinite());
  BOOST_CHECK(!p4.isPositiveSemiDefinite());
  BOOST_CHECK(p4.isSymmetric());
  BOOST_CHECK(p4.isUndefinite());
  BOOST_CHECK(!p4.isZero());

  MatrixProperties p5(MatrixShape::ZERO);
  BOOST_CHECK(p5.shape() == MatrixShape::ZERO);
  BOOST_CHECK(p5.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(p5.isConstant());
  BOOST_CHECK(p5.isDiagonal());
  BOOST_CHECK(!p5.isIdentity());
  BOOST_CHECK(!p5.isInvertible());
  BOOST_CHECK(!p5.isMinusIdentity());
  BOOST_CHECK(p5.isMultipleOfIdentity());
  BOOST_CHECK(!p5.isNegativeDefinite());
  BOOST_CHECK(p5.isNegativeSemidefinite());
  BOOST_CHECK(!p5.isNonZeroUndefinite());
  BOOST_CHECK(!p5.isPositiveDefinite());
  BOOST_CHECK(p5.isPositiveSemiDefinite());
  BOOST_CHECK(p5.isSymmetric());
  BOOST_CHECK(p5.isUndefinite());
  BOOST_CHECK(p5.isZero());
}

BOOST_AUTO_TEST_CASE(DeductionPropertiesTest)
{
  MatrixProperties p01(MatrixShape::GENERAL, Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(p01.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p01.positivness() == Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(!p01.isConstant());
  BOOST_CHECK(!p01.isDiagonal());
  BOOST_CHECK(!p01.isIdentity());
  BOOST_CHECK(!p01.isInvertible());
  BOOST_CHECK(!p01.isMinusIdentity());
  BOOST_CHECK(!p01.isMultipleOfIdentity());
  BOOST_CHECK(!p01.isNegativeDefinite());
  BOOST_CHECK(!p01.isNegativeSemidefinite());
  BOOST_CHECK(!p01.isNonZeroUndefinite());
  BOOST_CHECK(!p01.isPositiveDefinite());
  BOOST_CHECK(p01.isPositiveSemiDefinite());
  BOOST_CHECK(p01.isSymmetric());
  BOOST_CHECK(p01.isUndefinite());
  BOOST_CHECK(!p01.isZero());

  MatrixProperties p02(MatrixShape::GENERAL, Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p02.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p02.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(!p02.isConstant());
  BOOST_CHECK(!p02.isDiagonal());
  BOOST_CHECK(!p02.isIdentity());
  BOOST_CHECK(p02.isInvertible());
  BOOST_CHECK(!p02.isMinusIdentity());
  BOOST_CHECK(!p02.isMultipleOfIdentity());
  BOOST_CHECK(!p02.isNegativeDefinite());
  BOOST_CHECK(!p02.isNegativeSemidefinite());
  BOOST_CHECK(p02.isNonZeroUndefinite());
  BOOST_CHECK(p02.isPositiveDefinite());
  BOOST_CHECK(p02.isPositiveSemiDefinite());
  BOOST_CHECK(p02.isSymmetric());
  BOOST_CHECK(p02.isUndefinite());
  BOOST_CHECK(!p02.isZero());

  MatrixProperties p03(MatrixShape::GENERAL, Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(p03.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p03.positivness() == Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(!p03.isConstant());
  BOOST_CHECK(!p03.isDiagonal());
  BOOST_CHECK(!p03.isIdentity());
  BOOST_CHECK(!p03.isInvertible());
  BOOST_CHECK(!p03.isMinusIdentity());
  BOOST_CHECK(!p03.isMultipleOfIdentity());
  BOOST_CHECK(!p03.isNegativeDefinite());
  BOOST_CHECK(p03.isNegativeSemidefinite());
  BOOST_CHECK(!p03.isNonZeroUndefinite());
  BOOST_CHECK(!p03.isPositiveDefinite());
  BOOST_CHECK(!p03.isPositiveSemiDefinite());
  BOOST_CHECK(p03.isSymmetric());
  BOOST_CHECK(p03.isUndefinite());
  BOOST_CHECK(!p03.isZero());

  MatrixProperties p04(MatrixShape::GENERAL, Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p04.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p04.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(!p04.isConstant());
  BOOST_CHECK(!p04.isDiagonal());
  BOOST_CHECK(!p04.isIdentity());
  BOOST_CHECK(p04.isInvertible());
  BOOST_CHECK(!p04.isMinusIdentity());
  BOOST_CHECK(!p04.isMultipleOfIdentity());
  BOOST_CHECK(p04.isNegativeDefinite());
  BOOST_CHECK(p04.isNegativeSemidefinite());
  BOOST_CHECK(p04.isNonZeroUndefinite());
  BOOST_CHECK(!p04.isPositiveDefinite());
  BOOST_CHECK(!p04.isPositiveSemiDefinite());
  BOOST_CHECK(p04.isSymmetric());
  BOOST_CHECK(p04.isUndefinite());
  BOOST_CHECK(!p04.isZero());

  MatrixProperties p05(MatrixShape::GENERAL, Positivness::UNDEFINITE);
  BOOST_CHECK(p05.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p05.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(!p05.isConstant());
  BOOST_CHECK(!p05.isDiagonal());
  BOOST_CHECK(!p05.isIdentity());
  BOOST_CHECK(!p05.isInvertible());
  BOOST_CHECK(!p05.isMinusIdentity());
  BOOST_CHECK(!p05.isMultipleOfIdentity());
  BOOST_CHECK(!p05.isNegativeDefinite());
  BOOST_CHECK(!p05.isNegativeSemidefinite());
  BOOST_CHECK(!p05.isNonZeroUndefinite());
  BOOST_CHECK(!p05.isPositiveDefinite());
  BOOST_CHECK(!p05.isPositiveSemiDefinite());
  BOOST_CHECK(p05.isSymmetric());
  BOOST_CHECK(p05.isUndefinite());
  BOOST_CHECK(!p05.isZero());

  MatrixProperties p06(MatrixShape::GENERAL, Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(p06.shape() == MatrixShape::GENERAL);
  BOOST_CHECK(p06.positivness() == Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(!p06.isConstant());
  BOOST_CHECK(!p06.isDiagonal());
  BOOST_CHECK(!p06.isIdentity());
  BOOST_CHECK(p06.isInvertible());
  BOOST_CHECK(!p06.isMinusIdentity());
  BOOST_CHECK(!p06.isMultipleOfIdentity());
  BOOST_CHECK(!p06.isNegativeDefinite());
  BOOST_CHECK(!p06.isNegativeSemidefinite());
  BOOST_CHECK(p06.isNonZeroUndefinite());
  BOOST_CHECK(!p06.isPositiveDefinite());
  BOOST_CHECK(!p06.isPositiveSemiDefinite());
  BOOST_CHECK(p06.isSymmetric());
  BOOST_CHECK(p06.isUndefinite());
  BOOST_CHECK(!p06.isZero());
  

  MatrixProperties p11(MatrixShape::DIAGONAL, Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(p11.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p11.positivness() == Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(!p11.isConstant());
  BOOST_CHECK(p11.isDiagonal());
  BOOST_CHECK(!p11.isIdentity());
  BOOST_CHECK(!p11.isInvertible());
  BOOST_CHECK(!p11.isMinusIdentity());
  BOOST_CHECK(!p11.isMultipleOfIdentity());
  BOOST_CHECK(!p11.isNegativeDefinite());
  BOOST_CHECK(!p11.isNegativeSemidefinite());
  BOOST_CHECK(!p11.isNonZeroUndefinite());
  BOOST_CHECK(!p11.isPositiveDefinite());
  BOOST_CHECK(p11.isPositiveSemiDefinite());
  BOOST_CHECK(p11.isSymmetric());
  BOOST_CHECK(p11.isUndefinite());
  BOOST_CHECK(!p11.isZero());

  MatrixProperties p12(MatrixShape::DIAGONAL, Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p12.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p12.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(!p12.isConstant());
  BOOST_CHECK(p12.isDiagonal());
  BOOST_CHECK(!p12.isIdentity());
  BOOST_CHECK(p12.isInvertible());
  BOOST_CHECK(!p12.isMinusIdentity());
  BOOST_CHECK(!p12.isMultipleOfIdentity());
  BOOST_CHECK(!p12.isNegativeDefinite());
  BOOST_CHECK(!p12.isNegativeSemidefinite());
  BOOST_CHECK(p12.isNonZeroUndefinite());
  BOOST_CHECK(p12.isPositiveDefinite());
  BOOST_CHECK(p12.isPositiveSemiDefinite());
  BOOST_CHECK(p12.isSymmetric());
  BOOST_CHECK(p12.isUndefinite());
  BOOST_CHECK(!p12.isZero());

  MatrixProperties p13(MatrixShape::DIAGONAL, Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(p13.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p13.positivness() == Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(!p13.isConstant());
  BOOST_CHECK(p13.isDiagonal());
  BOOST_CHECK(!p13.isIdentity());
  BOOST_CHECK(!p13.isInvertible());
  BOOST_CHECK(!p13.isMinusIdentity());
  BOOST_CHECK(!p13.isMultipleOfIdentity());
  BOOST_CHECK(!p13.isNegativeDefinite());
  BOOST_CHECK(p13.isNegativeSemidefinite());
  BOOST_CHECK(!p13.isNonZeroUndefinite());
  BOOST_CHECK(!p13.isPositiveDefinite());
  BOOST_CHECK(!p13.isPositiveSemiDefinite());
  BOOST_CHECK(p13.isSymmetric());
  BOOST_CHECK(p13.isUndefinite());
  BOOST_CHECK(!p13.isZero());

  MatrixProperties p14(MatrixShape::DIAGONAL, Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p14.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p14.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(!p14.isConstant());
  BOOST_CHECK(p14.isDiagonal());
  BOOST_CHECK(!p14.isIdentity());
  BOOST_CHECK(p14.isInvertible());
  BOOST_CHECK(!p14.isMinusIdentity());
  BOOST_CHECK(!p14.isMultipleOfIdentity());
  BOOST_CHECK(p14.isNegativeDefinite());
  BOOST_CHECK(p14.isNegativeSemidefinite());
  BOOST_CHECK(p14.isNonZeroUndefinite());
  BOOST_CHECK(!p14.isPositiveDefinite());
  BOOST_CHECK(!p14.isPositiveSemiDefinite());
  BOOST_CHECK(p14.isSymmetric());
  BOOST_CHECK(p14.isUndefinite());
  BOOST_CHECK(!p14.isZero());

  MatrixProperties p15(MatrixShape::DIAGONAL, Positivness::UNDEFINITE);
  BOOST_CHECK(p15.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p15.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(!p15.isConstant());
  BOOST_CHECK(p15.isDiagonal());
  BOOST_CHECK(!p15.isIdentity());
  BOOST_CHECK(!p15.isInvertible());
  BOOST_CHECK(!p15.isMinusIdentity());
  BOOST_CHECK(!p15.isMultipleOfIdentity());
  BOOST_CHECK(!p15.isNegativeDefinite());
  BOOST_CHECK(!p15.isNegativeSemidefinite());
  BOOST_CHECK(!p15.isNonZeroUndefinite());
  BOOST_CHECK(!p15.isPositiveDefinite());
  BOOST_CHECK(!p15.isPositiveSemiDefinite());
  BOOST_CHECK(p15.isSymmetric());
  BOOST_CHECK(p15.isUndefinite());
  BOOST_CHECK(!p15.isZero());

  MatrixProperties p16(MatrixShape::DIAGONAL, Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(p16.shape() == MatrixShape::DIAGONAL);
  BOOST_CHECK(p16.positivness() == Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(!p16.isConstant());
  BOOST_CHECK(p16.isDiagonal());
  BOOST_CHECK(!p16.isIdentity());
  BOOST_CHECK(p16.isInvertible());
  BOOST_CHECK(!p16.isMinusIdentity());
  BOOST_CHECK(!p16.isMultipleOfIdentity());
  BOOST_CHECK(!p16.isNegativeDefinite());
  BOOST_CHECK(!p16.isNegativeSemidefinite());
  BOOST_CHECK(p16.isNonZeroUndefinite());
  BOOST_CHECK(!p16.isPositiveDefinite());
  BOOST_CHECK(!p16.isPositiveSemiDefinite());
  BOOST_CHECK(p16.isSymmetric());
  BOOST_CHECK(p16.isUndefinite());
  BOOST_CHECK(!p16.isZero());
  

  MatrixProperties p21(MatrixShape::MULTIPLE_OF_IDENTITY, Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(p21.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p21.positivness() == Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(!p21.isConstant());
  BOOST_CHECK(p21.isDiagonal());
  BOOST_CHECK(!p21.isIdentity());
  BOOST_CHECK(!p21.isInvertible());
  BOOST_CHECK(!p21.isMinusIdentity());
  BOOST_CHECK(p21.isMultipleOfIdentity());
  BOOST_CHECK(!p21.isNegativeDefinite());
  BOOST_CHECK(!p21.isNegativeSemidefinite());
  BOOST_CHECK(!p21.isNonZeroUndefinite());
  BOOST_CHECK(!p21.isPositiveDefinite());
  BOOST_CHECK(p21.isPositiveSemiDefinite());
  BOOST_CHECK(p21.isSymmetric());
  BOOST_CHECK(p21.isUndefinite());
  BOOST_CHECK(!p21.isZero());

  MatrixProperties p22(MatrixShape::MULTIPLE_OF_IDENTITY, Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p22.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p22.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(!p22.isConstant());
  BOOST_CHECK(p22.isDiagonal());
  BOOST_CHECK(!p22.isIdentity());
  BOOST_CHECK(p22.isInvertible());
  BOOST_CHECK(!p22.isMinusIdentity());
  BOOST_CHECK(p22.isMultipleOfIdentity());
  BOOST_CHECK(!p22.isNegativeDefinite());
  BOOST_CHECK(!p22.isNegativeSemidefinite());
  BOOST_CHECK(p22.isNonZeroUndefinite());
  BOOST_CHECK(p22.isPositiveDefinite());
  BOOST_CHECK(p22.isPositiveSemiDefinite());
  BOOST_CHECK(p22.isSymmetric());
  BOOST_CHECK(p22.isUndefinite());
  BOOST_CHECK(!p22.isZero());

  MatrixProperties p23(MatrixShape::MULTIPLE_OF_IDENTITY, Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(p23.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p23.positivness() == Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(!p23.isConstant());
  BOOST_CHECK(p23.isDiagonal());
  BOOST_CHECK(!p23.isIdentity());
  BOOST_CHECK(!p23.isInvertible());
  BOOST_CHECK(!p23.isMinusIdentity());
  BOOST_CHECK(p23.isMultipleOfIdentity());
  BOOST_CHECK(!p23.isNegativeDefinite());
  BOOST_CHECK(p23.isNegativeSemidefinite());
  BOOST_CHECK(!p23.isNonZeroUndefinite());
  BOOST_CHECK(!p23.isPositiveDefinite());
  BOOST_CHECK(!p23.isPositiveSemiDefinite());
  BOOST_CHECK(p23.isSymmetric());
  BOOST_CHECK(p23.isUndefinite());
  BOOST_CHECK(!p23.isZero());

  MatrixProperties p24(MatrixShape::MULTIPLE_OF_IDENTITY, Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p24.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p24.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(!p24.isConstant());
  BOOST_CHECK(p24.isDiagonal());
  BOOST_CHECK(!p24.isIdentity());
  BOOST_CHECK(p24.isInvertible());
  BOOST_CHECK(!p24.isMinusIdentity());
  BOOST_CHECK(p24.isMultipleOfIdentity());
  BOOST_CHECK(p24.isNegativeDefinite());
  BOOST_CHECK(p24.isNegativeSemidefinite());
  BOOST_CHECK(p24.isNonZeroUndefinite());
  BOOST_CHECK(!p24.isPositiveDefinite());
  BOOST_CHECK(!p24.isPositiveSemiDefinite());
  BOOST_CHECK(p24.isSymmetric());
  BOOST_CHECK(p24.isUndefinite());
  BOOST_CHECK(!p24.isZero());

  MatrixProperties p25(MatrixShape::MULTIPLE_OF_IDENTITY, Positivness::UNDEFINITE);
  BOOST_CHECK(p25.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p25.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(!p25.isConstant());
  BOOST_CHECK(p25.isDiagonal());
  BOOST_CHECK(!p25.isIdentity());
  BOOST_CHECK(!p25.isInvertible());
  BOOST_CHECK(!p25.isMinusIdentity());
  BOOST_CHECK(p25.isMultipleOfIdentity());
  BOOST_CHECK(!p25.isNegativeDefinite());
  BOOST_CHECK(!p25.isNegativeSemidefinite());
  BOOST_CHECK(!p25.isNonZeroUndefinite());
  BOOST_CHECK(!p25.isPositiveDefinite());
  BOOST_CHECK(!p25.isPositiveSemiDefinite());
  BOOST_CHECK(p25.isSymmetric());
  BOOST_CHECK(p25.isUndefinite());
  BOOST_CHECK(!p25.isZero());

  MatrixProperties p26(MatrixShape::MULTIPLE_OF_IDENTITY, Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(p26.shape() == MatrixShape::MULTIPLE_OF_IDENTITY);
  BOOST_CHECK(p26.positivness() == Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(!p26.isConstant());
  BOOST_CHECK(p26.isDiagonal());
  BOOST_CHECK(!p26.isIdentity());
  BOOST_CHECK(p26.isInvertible());
  BOOST_CHECK(!p26.isMinusIdentity());
  BOOST_CHECK(p26.isMultipleOfIdentity());
  BOOST_CHECK(!p26.isNegativeDefinite());
  BOOST_CHECK(!p26.isNegativeSemidefinite());
  BOOST_CHECK(p26.isNonZeroUndefinite());
  BOOST_CHECK(!p26.isPositiveDefinite());
  BOOST_CHECK(!p26.isPositiveSemiDefinite());
  BOOST_CHECK(p26.isSymmetric());
  BOOST_CHECK(p26.isUndefinite());
  BOOST_CHECK(!p26.isZero());

  MatrixProperties p31(MatrixShape::IDENTITY, Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(p31.shape() == MatrixShape::IDENTITY);
  BOOST_CHECK(p31.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p31.isConstant());
  BOOST_CHECK(p31.isDiagonal());
  BOOST_CHECK(p31.isIdentity());
  BOOST_CHECK(p31.isInvertible());
  BOOST_CHECK(!p31.isMinusIdentity());
  BOOST_CHECK(p31.isMultipleOfIdentity());
  BOOST_CHECK(!p31.isNegativeDefinite());
  BOOST_CHECK(!p31.isNegativeSemidefinite());
  BOOST_CHECK(p31.isNonZeroUndefinite());
  BOOST_CHECK(p31.isPositiveDefinite());
  BOOST_CHECK(p31.isPositiveSemiDefinite());
  BOOST_CHECK(p31.isSymmetric());
  BOOST_CHECK(p31.isUndefinite());
  BOOST_CHECK(!p31.isZero());

  MatrixProperties p32(MatrixShape::IDENTITY, Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p32.shape() == MatrixShape::IDENTITY);
  BOOST_CHECK(p32.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p32.isConstant());
  BOOST_CHECK(p32.isDiagonal());
  BOOST_CHECK(p32.isIdentity());
  BOOST_CHECK(p32.isInvertible());
  BOOST_CHECK(!p32.isMinusIdentity());
  BOOST_CHECK(p32.isMultipleOfIdentity());
  BOOST_CHECK(!p32.isNegativeDefinite());
  BOOST_CHECK(!p32.isNegativeSemidefinite());
  BOOST_CHECK(p32.isNonZeroUndefinite());
  BOOST_CHECK(p32.isPositiveDefinite());
  BOOST_CHECK(p32.isPositiveSemiDefinite());
  BOOST_CHECK(p32.isSymmetric());
  BOOST_CHECK(p32.isUndefinite());
  BOOST_CHECK(!p32.isZero());

  //Fire assert (rightly)
  //MatrixProperties p33(MatrixShape::IDENTITY, Positivness::NEGATIVE_SEMIDEFINITE);
  //MatrixProperties p34(MatrixShape::IDENTITY, Positivness::NEGATIVE_DEFINITE);

  MatrixProperties p35(MatrixShape::IDENTITY, Positivness::UNDEFINITE);
  BOOST_CHECK(p35.shape() == MatrixShape::IDENTITY);
  BOOST_CHECK(p35.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p35.isConstant());
  BOOST_CHECK(p35.isDiagonal());
  BOOST_CHECK(p35.isIdentity());
  BOOST_CHECK(p35.isInvertible());
  BOOST_CHECK(!p35.isMinusIdentity());
  BOOST_CHECK(p35.isMultipleOfIdentity());
  BOOST_CHECK(!p35.isNegativeDefinite());
  BOOST_CHECK(!p35.isNegativeSemidefinite());
  BOOST_CHECK(p35.isNonZeroUndefinite());
  BOOST_CHECK(p35.isPositiveDefinite());
  BOOST_CHECK(p35.isPositiveSemiDefinite());
  BOOST_CHECK(p35.isSymmetric());
  BOOST_CHECK(p35.isUndefinite());
  BOOST_CHECK(!p35.isZero());

  MatrixProperties p36(MatrixShape::IDENTITY, Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(p36.shape() == MatrixShape::IDENTITY);
  BOOST_CHECK(p36.positivness() == Positivness::POSITIVE_DEFINITE);
  BOOST_CHECK(p36.isConstant());
  BOOST_CHECK(p36.isDiagonal());
  BOOST_CHECK(p36.isIdentity());
  BOOST_CHECK(p36.isInvertible());
  BOOST_CHECK(!p36.isMinusIdentity());
  BOOST_CHECK(p36.isMultipleOfIdentity());
  BOOST_CHECK(!p36.isNegativeDefinite());
  BOOST_CHECK(!p36.isNegativeSemidefinite());
  BOOST_CHECK(p36.isNonZeroUndefinite());
  BOOST_CHECK(p36.isPositiveDefinite());
  BOOST_CHECK(p36.isPositiveSemiDefinite());
  BOOST_CHECK(p36.isSymmetric());
  BOOST_CHECK(p36.isUndefinite());
  BOOST_CHECK(!p36.isZero());

  //Fire assert (rightly)
  //MatrixProperties p41(MatrixShape::MINUS_IDENTITY, Positivness::POSITIVE_SEMIDEFINITE);
  //MatrixProperties p42(MatrixShape::MINUS_IDENTITY, Positivness::POSITIVE_DEFINITE);
  
  
  MatrixProperties p43(MatrixShape::MINUS_IDENTITY, Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(p43.shape() == MatrixShape::MINUS_IDENTITY);
  BOOST_CHECK(p43.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p43.isConstant());
  BOOST_CHECK(p43.isDiagonal());
  BOOST_CHECK(!p43.isIdentity());
  BOOST_CHECK(p43.isInvertible());
  BOOST_CHECK(p43.isMinusIdentity());
  BOOST_CHECK(p43.isMultipleOfIdentity());
  BOOST_CHECK(p43.isNegativeDefinite());
  BOOST_CHECK(p43.isNegativeSemidefinite());
  BOOST_CHECK(p43.isNonZeroUndefinite());
  BOOST_CHECK(!p43.isPositiveDefinite());
  BOOST_CHECK(!p43.isPositiveSemiDefinite());
  BOOST_CHECK(p43.isSymmetric());
  BOOST_CHECK(p43.isUndefinite());
  BOOST_CHECK(!p43.isZero());

  MatrixProperties p44(MatrixShape::MINUS_IDENTITY, Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p44.shape() == MatrixShape::MINUS_IDENTITY);
  BOOST_CHECK(p44.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p44.isConstant());
  BOOST_CHECK(p44.isDiagonal());
  BOOST_CHECK(!p44.isIdentity());
  BOOST_CHECK(p44.isInvertible());
  BOOST_CHECK(p44.isMinusIdentity());
  BOOST_CHECK(p44.isMultipleOfIdentity());
  BOOST_CHECK(p44.isNegativeDefinite());
  BOOST_CHECK(p44.isNegativeSemidefinite());
  BOOST_CHECK(p44.isNonZeroUndefinite());
  BOOST_CHECK(!p44.isPositiveDefinite());
  BOOST_CHECK(!p44.isPositiveSemiDefinite());
  BOOST_CHECK(p44.isSymmetric());
  BOOST_CHECK(p44.isUndefinite());
  BOOST_CHECK(!p44.isZero());

  MatrixProperties p45(MatrixShape::MINUS_IDENTITY, Positivness::UNDEFINITE);
  BOOST_CHECK(p45.shape() == MatrixShape::MINUS_IDENTITY);
  BOOST_CHECK(p45.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p45.isConstant());
  BOOST_CHECK(p45.isDiagonal());
  BOOST_CHECK(!p45.isIdentity());
  BOOST_CHECK(p45.isInvertible());
  BOOST_CHECK(p45.isMinusIdentity());
  BOOST_CHECK(p45.isMultipleOfIdentity());
  BOOST_CHECK(p45.isNegativeDefinite());
  BOOST_CHECK(p45.isNegativeSemidefinite());
  BOOST_CHECK(p45.isNonZeroUndefinite());
  BOOST_CHECK(!p45.isPositiveDefinite());
  BOOST_CHECK(!p45.isPositiveSemiDefinite());
  BOOST_CHECK(p45.isSymmetric());
  BOOST_CHECK(p45.isUndefinite());
  BOOST_CHECK(!p45.isZero());

  MatrixProperties p46(MatrixShape::MINUS_IDENTITY, Positivness::NON_ZERO_UNDEFINITE);
  BOOST_CHECK(p46.shape() == MatrixShape::MINUS_IDENTITY);
  BOOST_CHECK(p46.positivness() == Positivness::NEGATIVE_DEFINITE);
  BOOST_CHECK(p46.isConstant());
  BOOST_CHECK(p46.isDiagonal());
  BOOST_CHECK(!p46.isIdentity());
  BOOST_CHECK(p46.isInvertible());
  BOOST_CHECK(p46.isMinusIdentity());
  BOOST_CHECK(p46.isMultipleOfIdentity());
  BOOST_CHECK(p46.isNegativeDefinite());
  BOOST_CHECK(p46.isNegativeSemidefinite());
  BOOST_CHECK(p46.isNonZeroUndefinite());
  BOOST_CHECK(!p46.isPositiveDefinite());
  BOOST_CHECK(!p46.isPositiveSemiDefinite());
  BOOST_CHECK(p46.isSymmetric());
  BOOST_CHECK(p46.isUndefinite());
  BOOST_CHECK(!p46.isZero());
  
  MatrixProperties p51(MatrixShape::ZERO, Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(p51.shape() == MatrixShape::ZERO);
  BOOST_CHECK(p51.positivness() == Positivness::POSITIVE_SEMIDEFINITE);
  BOOST_CHECK(p51.isConstant());
  BOOST_CHECK(p51.isDiagonal());
  BOOST_CHECK(!p51.isIdentity());
  BOOST_CHECK(!p51.isInvertible());
  BOOST_CHECK(!p51.isMinusIdentity());
  BOOST_CHECK(p51.isMultipleOfIdentity());
  BOOST_CHECK(!p51.isNegativeDefinite());
  BOOST_CHECK(p51.isNegativeSemidefinite());
  BOOST_CHECK(!p51.isNonZeroUndefinite());
  BOOST_CHECK(!p51.isPositiveDefinite());
  BOOST_CHECK(p51.isPositiveSemiDefinite());
  BOOST_CHECK(p51.isSymmetric());
  BOOST_CHECK(p51.isUndefinite());
  BOOST_CHECK(p51.isZero());

  
  //Fire assert (rightly)
  //MatrixProperties p52(MatrixShape::ZERO, Positivness::POSITIVE_DEFINITE);
  
  MatrixProperties p53(MatrixShape::ZERO, Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(p53.shape() == MatrixShape::ZERO);
  BOOST_CHECK(p53.positivness() == Positivness::NEGATIVE_SEMIDEFINITE);
  BOOST_CHECK(p53.isConstant());
  BOOST_CHECK(p53.isDiagonal());
  BOOST_CHECK(!p53.isIdentity());
  BOOST_CHECK(!p53.isInvertible());
  BOOST_CHECK(!p53.isMinusIdentity());
  BOOST_CHECK(p53.isMultipleOfIdentity());
  BOOST_CHECK(!p53.isNegativeDefinite());
  BOOST_CHECK(p53.isNegativeSemidefinite());
  BOOST_CHECK(!p53.isNonZeroUndefinite());
  BOOST_CHECK(!p53.isPositiveDefinite());
  BOOST_CHECK(p53.isPositiveSemiDefinite());
  BOOST_CHECK(p53.isSymmetric());
  BOOST_CHECK(p53.isUndefinite());
  BOOST_CHECK(p53.isZero());

  //Fire assert (rightly)
  //MatrixProperties p54(MatrixShape::ZERO, Positivness::NEGATIVE_DEFINITE);

  MatrixProperties p55(MatrixShape::ZERO, Positivness::UNDEFINITE);
  BOOST_CHECK(p55.shape() == MatrixShape::ZERO);
  BOOST_CHECK(p55.positivness() == Positivness::UNDEFINITE);
  BOOST_CHECK(p55.isConstant());
  BOOST_CHECK(p55.isDiagonal());
  BOOST_CHECK(!p55.isIdentity());
  BOOST_CHECK(!p55.isInvertible());
  BOOST_CHECK(!p55.isMinusIdentity());
  BOOST_CHECK(p55.isMultipleOfIdentity());
  BOOST_CHECK(!p55.isNegativeDefinite());
  BOOST_CHECK(p55.isNegativeSemidefinite());
  BOOST_CHECK(!p55.isNonZeroUndefinite());
  BOOST_CHECK(!p55.isPositiveDefinite());
  BOOST_CHECK(p55.isPositiveSemiDefinite());
  BOOST_CHECK(p55.isSymmetric());
  BOOST_CHECK(p55.isUndefinite());
  BOOST_CHECK(!p55.isZero());

  //Fire assert (rightly)
  //MatrixProperties p56(MatrixShape::ZERO, Positivness::NON_ZERO_UNDEFINITE);
}